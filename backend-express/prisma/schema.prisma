// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
   id Int @id @default(autoincrement())
   statusenabled Boolean 
   first_name String? @db.VarChar(255)
   last_name String? @db.VarChar(255)
   username String? @db.VarChar(255)
   email String @unique(map: "email") @db.VarChar(255)
   phonenumber String @db.VarChar(255)
   password String? @db.VarChar(255)
   createdAt DateTime @default(now())
   updatedAt  DateTime @updatedAt
   cars_owner Cars_owners[]
   booking_id Bookings[]
   @@map("users")
}

model Cars_owners{
  id Int @id @default(autoincrement())
  statusenabled Boolean 
  users User @relation(fields: [user_id],references: [id])
  user_id Int
  daily_rental_price Int
  merk String? @db.VarChar(255)
  year String? @db.VarChar(4)
  license_plate String? @db.VarChar(10)
  created_at  DateTime @default(now())
  booking_id Bookings[]
  address String? @db.VarChar(255)
  file String? @db.VarChar(255)
  Car_features Car_features[]
  @@map("cars_owners")
}


model Bookings{
  id Int @id @default(autoincrement())
  statusenabled Boolean 
  users User @relation(fields: [user_id],references: [id])
  cars_owners Cars_owners @relation(fields: [cars_owner_id], references: [id])
  user_id Int
  cars_owner_id Int
  
  pickup_location String? @db.VarChar(255)
  dropoff_location String? @db.VarChar(255)
  pickup_schedule DateTime @db.Timestamptz(3)
  dropoff_schedule DateTime @db.Timestamptz(3)

  m_expiry_time DateTime?
  m_fraud_status String? @db.VarChar(50)
  m_gross_amount Int?
  m_order_id String? @db.VarChar(255)
  m_merchant_id String? @db.VarChar(255)
  m_payment_type String? @db.VarChar(100)
  // m_payment_method String? @db.VarChar(20)
  m_bank String? @db.VarChar(20)
  m_va_number String? @db.VarChar(100)
  m_bill_key String? @db.VarChar(100)
  m_biller_code String? @db.VarChar(100)
  m_permata_va_number String? @db.VarChar(100)

  m_transaction_id String? @db.VarChar(255)
  m_transaction_status String? @db.VarChar(50)

  


  created_at  DateTime @default(now())


//   {
//   currency: "IDR",
//   expiry_time: "2024-09-06 22:09:37",
//   fraud_status: "accept",
//   gross_amount: "600000.00",
//   merchant_id: "G626084946",
//   order_id: "de487f0f-3c6c-4e18-8f40-e59300390b61",
//   payment_type: "bank_transfer",
//   permata_va_number: "8490062066988915",
//   status_code: "201",
//   status_message: "Success, PERMATA VA transaction is successful",
//   transaction_id: "279018d0-b6b3-4ba9-b423-478f2d29674a",
//   transaction_status: "pending",
//   transaction_time: "2024-09-05 22:09:37"
// };
  @@map("bookings")
}


model Car_features{
  id Int @id @default(autoincrement())
  statusenabled Boolean 
  cars_owners Cars_owners @relation(fields: [cars_owner_id], references: [id])
  cars_owner_id Int
  features Features @relation(fields: [features_id], references: [id])
  features_id Int
  @@map("car_features")
}

model Features{
  id Int @id @default(autoincrement())
  statusenabled Boolean 
  features_name String? @db.VarChar(255)
  created_at  DateTime @default(now())
  Car_features Car_features[]
  type_features Type_features  @default(PASSENGERS)
  @@map("features")
}


enum Type_features {
  PASSENGERS
  DOORS
  BAGS
  TRANSMISSION
}